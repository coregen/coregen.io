[{"authors":["admin"],"categories":null,"content":"My main interests are Reading, Writing, Linux, Devops, FOSS and Software development\nI'm currently learning Terraform, Kubernetes, Ansible, Haskell, AWS, Consul, Docker and other interesting subjects related to FOSS, DevOps and the Cloud.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://coregen.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"My main interests are Reading, Writing, Linux, Devops, FOSS and Software development\nI'm currently learning Terraform, Kubernetes, Ansible, Haskell, AWS, Consul, Docker and other interesting subjects related to FOSS, DevOps and the Cloud.","tags":null,"title":"Barak Avrahami","type":"authors"},{"authors":null,"categories":["Devops"],"content":"Goals  Make a new home for our role in github Our Docker base images should support systemd Use Molecule to test our role Distribute role with ansible-galaxy  Note: if you want to avoid copy-pasting snippets, the project is available in coregen/ircstack Requirements  You should be running Linux or MacOS  Ansible, ansible-galaxy   git - Used for version control  Github account - You should have and account  hub (It's not required, but there will be some manual actions required if not installed)  Molecule - Will be used for testing the ansible role  Docker - Will be used by molecule to create containers  Version Control If you haven't heard of this term before, check out this article .\nWe will use Github as a remote for our new repository.\ncd /to/your/role/directory git init git add . git commit -m \u0026quot;Initial commit\u0026quot; Now that we have our local repository is set, we can continue with the remote. The following command will create a Github repository and add it as a remote in our local repository. You should be prompted for your user/password after running this command for the first time\nhub create myircstack # You can change \u0026quot;myircstack\u0026quot; to your desired repository name Now we can push our latest commit to our Github remote\ngit push origin master Docker and systemd As some of you might know, Docker is a container engine used by developers to automate application deployment, testing and in some cases is used to deploy applications in production environments. We will use Docker to test our role.\nLet's try using Molecule to build a container and run the role.In our molecule configuration file, we describe the configuration Molecule will use to create our container. In the last part, we wrote an Ansible task to install weechat on Debian 9, we should change centos:7 to debian:stretch under platforms.\nmolecule/default/molecule.yml\n--- dependency: name: galaxy driver: name: docker lint: name: yamllint platforms: - name: instance image: debian:stretch # \u0026lt;--- was centos:7 provisioner: name: ansible lint: name: ansible-lint verifier: name: testinfra lint: name: flake8 This will set our testing containers\u0026rsquo; base image to debian 9.Time to give Molecule a shot!\nmolecule create \u0026amp;\u0026amp; molecule converge The \u0026ldquo;create\u0026rdquo; command will create our container, and \u0026ldquo;converge\u0026rdquo; will run our role using the playbook _molecule/default/playbook.yaml_We can now see the output for both playbooks (One creates the container, the other runs our role).\nOur playbook is expected to fail when we first try activating a systemd service.\nTASK [myircstack : Activate weechat service] *********************************** fatal: [instance]: FAILED! =\u0026gt; {\u0026quot;changed\u0026quot;: false, \u0026quot;msg\u0026quot;: \u0026quot;Failed to find required executable systemctl in paths: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\u0026quot;} Those of you who are less familiar with Docker will be puzzled, and rightly so. The last time I checked, Debian 9 had systemd installed by default.\nTo make Docker and systemd play nice together, we have to do rewrite the playbook that creates the Docker container. The following snippet was taken from Jeff Geerling's excellent blog post regarding Ansible and Molecule testing.\nmolecule/default/molecule.yml\n--- dependency: name: galaxy driver: name: docker lint: name: yamllint platforms: - name: instance image: geerlingguy/docker-${MOLECULE_DISTRO:-debian9}-ansible:latest command: ${MOLECULE_DOCKER_COMMAND:-\u0026quot;\u0026quot;} privileged: true volumes: - /sys/fs/cgroup:/sys/fs/cgroup:rw exposed_ports: - 9001/tcp - 80/tcp published_ports: - 0.0.0.0:9001:9001/tcp - 0.0.0.0:80:80/tcp provisioner: name: ansible lint: name: ansible-lint log: true verifier: name: testinfra lint: name: flake8 In ths snippet we can see that we mount cgroups as read only and run this container in priviliged state, this allows the contrainer to execute systemd. I have opted to use Jeff's premade Docker containers, as they come with systemd, sysvinit and other goodies already installed.\nIn Molecule configuration we can use environment variables with defaults (if specified variable is not available). In the following example, MOLECULE_DISTRO will default to debian9\n${MOLECULE_DISTRO:-debian9} In addition to specifying the Docker image, we will expose port 80.\nNow we should be able to create our Docker container and see if our role works\n$ molecule create \u0026amp;\u0026amp; molecule converge GlowingBear frontend should be available after Molecule is done, try to connect using our default password (defaultpass).\nNotes:   If you are interested in some background about why systemd is not available in Docker containers by default you can check this article .\n  If you want to know about other Docker images from geerlingguy, here is the latest list\n  $ docker search geerlingguy | grep -o \u0026quot;^.*docker-.*-ansible\u0026quot; geerlingguy/docker-centos7-ansible geerlingguy/docker-ubuntu1604-ansible geerlingguy/docker-ubuntu1804-ansible geerlingguy/docker-debian9-ansible geerlingguy/docker-ubuntu1404-ansible geerlingguy/docker-debian8-ansible geerlingguy/docker-centos6-ansible geerlingguy/docker-fedora27-ansible geerlingguy/docker-fedora24-ansible geerlingguy/docker-ubuntu1204-ansible geerlingguy/docker-fedora29-ansible geerlingguy/docker-debian10-ansible geerlingguy/docker-centos8-ansible geerlingguy/docker-amazonlinux2-ansible geerlingguy/docker-fedora30-ansible geerlingguy/docker-fedora31-ansible Ansible Role Testing with Github Actions We will use Github Actions to run Molecule on push and pull requests. First, we can observe the examples that are given be Molecule in the official documentation and modify the example to suit our needs\n.github/workflows/test_role.yml\n--- name: Test my role with molecule on: [push, pull_request] # Triggers for starting a test run jobs: build: runs-on: ubuntu-latest # The linux distribution this task will run on strategy: matrix: image: - debian9 # The distro we will use inside docker to test our role, see below in MOLECULE_DISTRO steps: - uses: actions/checkout@v2 - name: Set up Python 3.7 uses: actions/setup-python@v1 with: python-version: 3.7 - name: Install dependencies run: | sudo apt install docker git python -m pip install --upgrade pip pip install -r requirements.txt - name: \u0026#34;Test role\u0026#34; run: | molecule test env: MOLECULE_DISTRO: \u0026#34;${{ matrix.image }}\u0026#34; # Used in molecule/default/molecule.yml to detemine the distro the role will be tested against Now Github Actions should test the role against Debian 9.\nAdd a requirements.txt file to our repository to make sure all python dependencies are installed.\nrequirements.txt\nansible==2.9.2 molecule[docker]==2.22 Ansible Galaxy Now that we know our role works, we can share it with others.Register to Ansible-Galaxy with your github account and login via cli\nansible-galaxy login # you will be prompted for you github user and password ansible-galaxy import --branch \u0026lt;branch_to_import\u0026gt; \u0026lt;github_user\u0026gt; \u0026lt;github_repo_name\u0026gt; -vvv # will import your role to galaxy, repository should be public Your role should now be available on ansible-galaxy, lets try installing it\nansible-galaxy install \u0026lt;github_username\u0026gt;.\u0026lt;name_of_the_role_in_meta\u0026gt; Example:\n$ ansible-galaxy install myuser.myrole - downloading role 'myrole', owned by myuser - downloading role from https://github.com/myuser/myrepo/archive/mybranch.tar.gz - extracting myuser.myrole to /path/th/.ansible/roles/myuser.myrole - myuser.myrole (mybranch) was installed successfully Conclusion As you can see, there are several different applications involved in testing and distributing out role, We should not be overwhelemed by the amount of information required of us, reading the official documentation of each application/service will help us understand the overll flow. Following are the informational blog posts and docs that I used when writing this post If you encounter errors, feel free to leave a comment\nReferences  Github Actions Documentation Github Actions Debugging guide Docker CLI Docs Ansible-Galaxy - Importing content Jeff Geerling's post about ansible role testing Hub documentation ","date":1577923200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577923200,"objectID":"c0e1c7aa0273c7899a15287f6b06716c","permalink":"https://coregen.io/post/weechat-ansible-aws-part-2/","publishdate":"2020-01-02T00:00:00Z","relpermalink":"/post/weechat-ansible-aws-part-2/","section":"post","summary":"Testing ansible role with Molecule, Docker and Github Actions","tags":["Ansible","Github","Weechat","Molecule","Docker"],"title":"Setting up Weechat relay server - Part 2","type":"post"},{"authors":null,"categories":["Devops"],"content":"Update: theres no need to copy/paste text, follow this link to view the role. Due to it being in active development some variable names and tasks will differ slightlyDuring my first year in high-tech my go-to place for asking Programming and Linux related questions was the IRC. For ease of use and portability I started using GlowingBear on Nginx to expose a web frontend to Weechat .\nUsing weechat this way led me to deploying this IRC \u0026ldquo;stack\u0026rdquo; on AWS which gives free t2.micro time quota for Free Tier users (first 12 months after signing up to AWS).After deploying weechat and Nginx manually (Including LetsEncrypt SSL certificates) I decided to find some way to automate this process.\nThe purpose of this article is to give an overview of creating, testing and deploying Ansible configurations, using weechat as an example.\nGoals Our goals are as following:\n An Ansible role that will deploy Weechat , Nginx and GlowingBear to a specific linux user We should be able to use this role without disturbing other software running on the server This role should be automatically tested using a CI system against 3 different distributions We will write Terraform plans to use this role in conjunction with other roles on a t2.micro instance on AWS  This article will be split into 3-4 parts. This first part will be dealing with creating the Ansible role.\nNote: if you want to avoid copy-pasting snippets, the project is available in coregen/ircstack Requirements The first part will require the following to be available\n You should be running Linux or MacOS  Ansible \u0026gt;= 2.8.5   Molecule \u0026gt;= 2.22 - Will be used for testing the Ansible role  Creating the role First, we will create an Ansible role using Molecule\n$ ansible-galaxy init myircstack $ cd myircstack/ $ molecule init role -r myircstack This will create the role in the directory you are currently at.\n○ → tree . ├── README.md ├── defaults │ └── main.yml ├── handlers │ └── main.yml ├── meta │ └── main.yml ├── molecule │ └── default │ ├── Dockerfile.j2 │ ├── INSTALL.rst │ ├── molecule.yml │ ├── playbook.yml │ └── tests │ └── test_default.py ├── tasks │ └── main.yml └── vars └── main.yml 8 directories, 11 files The initial file structure will include a Molecule directory which Molecule will use to create docker containers to test the role we write. we will be editing the files there soon.\nFor Ansible to install weechat-headless, which will allow us to run Weechat as a daemon , we need to make sure we are installing the latest Weechat version that supports it (minimum 2.1). we will use debian for our host.\nPackage Installation Following the Weechat installationg instructions for debian, we can start writing our playbook.\nInside tasks/ we should create the file:\ntasks/setup-debian9.yml\n--- - name: Update and install debian packages apt: update_cache: true # will update the local debian apt repositories pkg: - nginx # we will use nginx to servce glowingbear (more about this soon) - openssl - git # weechat dependencies / will be used to add deb repos - dirmngr - gpg-agent - apt-transport-https - name: Add weechat keys apt_key: keyserver: hkps://keys.openpgp.org id: 11E9DE8848F2B65222AA75B8D1820DB22A11534E - name: Add weechat repository apt_repository: repo: deb https://weechat.org/debian stretch main state: present - name: Add weechat src repository apt_repository: repo: deb-src https://weechat.org/debian stretch main state: present - name: Update and install weechat apt: update_cache: true pkg: - weechat - weechat-plugins - weechat-python - weechat-perl - weechat-headless This task is specific to debian 9 (stretch) and will be tested as such, it's also worth noting that we are adding an external repository (https://weechat.org/debian).\nThis means that in addition to depending on debian repositories we are depending on a private Weechat repository which is not ideal. We will addres this in the next chapters.\nSystem Configuration For weechat-headless to run successfuly (and hopefully in a way that doesnt create vulnerabilities) we are going to configure the linux environment. There are many ways to do this, some more secure than others.\nWe will begin with generic configurations. First, lets create some variables:\nvars/main.yaml\n--- weechat_username: \u0026quot;weechat\u0026quot; weechat_home: \u0026quot;/home/{{ weechat_username }}\u0026quot; weechat_config_dir: \u0026quot;{{ weechat_home }}/.weechat\u0026quot; weechat_creds_dir: \u0026quot;{{ weechat_config_dir }}/ssl\u0026quot; weechat_relay_cert: \u0026quot;{{ weechat_creds_dir }}/weechat.pem\u0026quot; weechat_relay_public_cert: \u0026quot;{{ weechat_creds_dir }}/relay.pem\u0026quot; weechat_relay_key: \u0026quot;{{ weechat_creds_dir }}/relay.key\u0026quot; weechat_relay_password: \u0026quot;defaultpassword\u0026quot; weechat_frontend: true nginx_server_url: \u0026quot;localhost\u0026quot; nginx_server_ssl_cert_dir: \u0026quot;/var/creds\u0026quot; glowingbear_path: /var/www/glowingbear nginx_with_reverse_proxy: true These variables allow us some flexability when writing our playbook, including using relay ssl cert and custom linux username\ntasks/environment.yaml\n--- - name: Create weechat user user: name: \u0026quot;{{ weechat_username }}\u0026quot; shell: /bin/bash create_home: true home: \u0026quot;{{ weechat_home }}\u0026quot; - name: Make sure ssl creds dir exists file: path: \u0026quot;{{ nginx_server_ssl_cert_dir }}\u0026quot; state: directory mode: '0700' - name: Make sure systemd units directory exists file: owner: root path: /usr/lib/systemd/system state: directory mode: '0755' - name: Make sure weechat config directory exists file: path: \u0026quot;{{ weechat_config_dir }}\u0026quot; state: directory mode: '0755' owner: \u0026quot;{{ weechat_username }}\u0026quot; - name: Make sure weechat creds directory exists file: path: \u0026quot;{{ weechat_creds_dir }}\u0026quot; state: directory mode: '0700' owner: \u0026quot;{{ weechat_username }}\u0026quot; Templates At this step will create 3 templates, for nginx, Weechat relay, and the Weechat service.\nLets start with the service:\nAs you can see, I have decided to use the Weechat user to run this service, this decision was made primarily due to the fact that Weechat by default allows command executions via /exec, and running this process as root is just asking for it \u0026hellip;\ntemplates/weechat.service.j2\n[Unit] Description=A headless WeeChat client and relay service After=network.target [Service] Type=forking ExecStart=/usr/bin/weechat-headless --daemon User={{ weechat_username }} [Install] WantedBy=default.target I have opted to inserting the password directly into the template, there are several other options including using environment variables It's possible to add the environment variables inside a file and adding EnvironmentFile=/path/to/file under Service in the systemd unit file\ntemplates/relay.conf.j2\n[look] auto_open_buffer = on raw_messages = 256 [color] client = cyan status_active = lightblue status_auth_failed = lightred status_connecting = yellow status_disconnected = lightred status_waiting_auth = brown text = default text_bg = default text_selected = white [network] allow_empty_password = off allowed_ips = \u0026quot;\u0026quot; bind_address = \u0026quot;\u0026quot; clients_purge_delay = 0 compression_level = 6 ipv6 = on max_clients = 5 password = \u0026quot;{{ weechat_relay_password }}\u0026quot; ssl_cert_key = \u0026quot;{{ weechat_relay_cert }}\u0026quot; ssl_priorities = \u0026quot;NORMAL:-VERS-SSL3.0\u0026quot; totp_secret = \u0026quot;\u0026quot; totp_window = 0 websocket_allowed_origins = \u0026quot;\u0026quot; [irc] backlog_max_minutes = 1440 backlog_max_number = 256 backlog_since_last_disconnect = on backlog_since_last_message = off backlog_tags = \u0026quot;irc_privmsg\u0026quot; backlog_time_format = \u0026quot;[%H:%M] \u0026quot; [weechat] commands = \u0026quot;\u0026quot; [port] ipv4.ipv6.weechat = 9001 [path] There are two things to note about the the Nginx config\n __We are not using SSL to secure the server (The plan is to use AWS Cloudfront)__ We added GlowingBear to the nginx server root. (It's a Weechat frontend )  More about this in later chapters\ntemplates/glowingbear.j2\nmap $http_upgrade $connection_upgrade { default upgrade; '' close; } upstream weechat { server [::1]:9001; } server { listen 80; server_name {{ nginx_server_url }}; location /weechat { proxy_pass https://weechat; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026quot;upgrade\u0026quot;; proxy_ssl_trusted_certificate {{ weechat_relay_key }}; proxy_ssl_verify off; proxy_read_timeout 4h; } location / { root {{ glowingbear_path }}; } } At this point we have everything we need as far as directory creation goes.\nNow we create the SSL certificate that will be used by the Weechat Relay. Weechat requires we concatenate both certificates and put the concatenated files\u0026rsquo; contents (cert before key) in relay.conf.\ntasks/weechat.yaml\n--- - name: Create weechat key shell: \u0026gt; openssl req -x509 -nodes -newkey rsa:4096 -sha256 -keyout {{ weechat_relay_key }} -out {{ weechat_relay_public_cert }} -days 365 -subj '/CN=weechat relay/' - name: Concatenate public cert and key into weechat relay cert shell: \u0026gt; cat {{ weechat_relay_key }} {{ weechat_relay_public_cert }} \u0026gt; {{ weechat_relay_cert }} # Create the weechat service unit file - name: Template weechat.service template: src: weechat.service.j2 dest: /usr/lib/systemd/system/weechat.service owner: root mode: '0755' - name: Template weechat relay config template: src: relay.conf.j2 dest: \u0026quot;{{ weechat_config_dir }}/relay.conf\u0026quot; owner: weechat mode: '0755' - name: Activate weechat service systemd: daemon_reload: true name: weechat enabled: true state: started Frontend Before enabling and starting Nginx clone GlowingBear and make sure the Nginx site configuration is templated and linked.\ntasks/glowingbear.yml\n--- - name: Download glowing bear git: repo: 'https://github.com/glowing-bear/glowing-bear.git' version: master dest: /var/www/glowingbear - name: Template nginx site template: src: glowingbear.j2 dest: /etc/nginx/sites-available/glowingbear owner: root mode: '0755' - name: Link glowingbear frontend to sites-enabled file: src: /etc/nginx/sites-available/glowingbear dest: /etc/nginx/sites-enabled/default state: link Nginx Configuration Here we simply enable and start the Nginx servicetasks/nginx.yml\n--- - name: Activate nginx service systemd: name: nginx enabled: true state: started Weechat configuration Finalizing Tasks To bring all the configuration together, we use the main.yml file that will be read and processed by Ansible during playbook execution.Notice that we are passing a conditional that will execute package installation only if we are using Debian 9. More distribution can be supported by adding tasks corresponding to their name/version.\ntasks/main.yml\n--- - include_tasks: setup-debian9.yml when: ansible_os_family == 'Debian' and ansible_distribution_version == '9' - include_tasks: environment.yml - include_tasks: weechat.yml - include_tasks: glowingbear.yml when: weechat_frontend - include_tasks: nginx.yml when: nginx_with_reverse_proxy Role Metadata Metadata should be added to provide more information about the role, it's author, role name, license and supported platforms\nmeta/main.yaml\ngalaxy_info: author: Barak Avrahami description: This role is used to install Weechat, and use it with nginx to serve GlowingBear company: Coregen role_name: ircstack license: MIT min_ansible_version: 2.4 platforms: - name: debian versions: - '9' galaxy_tags: [irc, weechat, nginx, glowingbear] dependencies: [] Conclusion Now that we have a role that installs and configures Weechat, Nginx and GlowingBear you might be asking \u0026ldquo;oh, well thats excellent, but how do I know it works?\u0026quot; Well.. you can add it to a playbook and execute this role, it will probably hopefully work. But testing this role will make changing anything considerably easier.\nI tested this code and it does work on Debian Stretch\nStay tuned for the the next part, in which we will configure Molecule and Docker to test this role on different systems\nI hope you enjoyed this article, leave a comment if you feel like I missed something or just to say Hi!\n","date":1575417600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575417600,"objectID":"16231169a7bdfd560e4a2f36219942ab","permalink":"https://coregen.io/post/weechat-ansible-aws-part-1/","publishdate":"2019-12-04T00:00:00Z","relpermalink":"/post/weechat-ansible-aws-part-1/","section":"post","summary":"Setting up Weechat relay using Ansible, Nginx, GlowingBear and Molecule","tags":["Devops","Ansible","Github","Git","Weechat"],"title":"Setting up Weechat relay server - Part 1","type":"post"},{"authors":null,"categories":["Devops"],"content":"Hi, as you probably read on my bio, my name is Barak Avrahami, this is the first of many posts I'm planning to write in this blog.\nYou are welcome to comment, open issues on my github projects and send suggestions to my email on any subject.\nThanks for visiting, more will be coming soon!\n","date":1574812800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574812800,"objectID":"217f360c6d38f838f69142e51e5bec69","permalink":"https://coregen.io/post/starting-the-journey/","publishdate":"2019-11-27T00:00:00Z","relpermalink":"/post/starting-the-journey/","section":"post","summary":"A first step","tags":[],"title":"Starting the journey","type":"post"},{"authors":["Barak Avrahami"],"categories":["devops"],"content":"Star","date":1574777938,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574777938,"objectID":"9dadba59c631bcf54d8dab87bb398d6f","permalink":"https://coregen.io/project/coregen/","publishdate":"2019-11-26T16:18:58+02:00","relpermalink":"/project/coregen/","section":"project","summary":"Learning Devops, one principle at a time!","tags":["tools","devops"],"title":"Coregen","type":"project"},{"authors":["Barak Avrahami"],"categories":[],"content":"Star","date":1574777938,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574777938,"objectID":"63ab6960d44df5c9f63327afc6dbc707","permalink":"https://coregen.io/project/openbalkans/","publishdate":"2019-11-26T16:18:58+02:00","relpermalink":"/project/openbalkans/","section":"project","summary":"Application-layer protocol for image boards","tags":["bson","python"],"title":"Openbalkans","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://coregen.io/about/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/about/","section":"","summary":"About me","tags":null,"title":"About","type":"widget_page"}]