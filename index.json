[{"authors":["admin"],"categories":null,"content":"Hi, my name is Barak Avrahami and I am a software developer in Infinidat. My main interests are Reading, Writing, Linux, Devops, FOSS and Software development.\nI\u0026rsquo;m currently learning Terraform, Kubernetes, Ansible, Haskell, AWS, Consul, Docker and other interesting subjects related to FOSS and the Cloud.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://blog.coregen.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Hi, my name is Barak Avrahami and I am a software developer in Infinidat. My main interests are Reading, Writing, Linux, Devops, FOSS and Software development.\nI\u0026rsquo;m currently learning Terraform, Kubernetes, Ansible, Haskell, AWS, Consul, Docker and other interesting subjects related to FOSS and the Cloud.","tags":null,"title":"Barak Avrahami","type":"authors"},{"authors":null,"categories":[],"content":"Hi, as you probably read on my Bio, my name is Barak Avrahami, this is the first of many posts I\u0026rsquo;m planning to public on this blog.\nYou are welcome to comment, open issues on my github projects and send suggestions to my email on any subject.\nThanks for reading this post, more will be coming soon!\n","date":1574812800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574812800,"objectID":"9bf67a9e420479df3785fb20b991199b","permalink":"https://blog.coregen.io/post/starting-the-journey/","publishdate":"2019-11-27T00:00:00Z","relpermalink":"/post/starting-the-journey/","section":"post","summary":"Hi, as you probably read on my Bio, my name is Barak Avrahami, this is the first of many posts I\u0026rsquo;m planning to public on this blog.\nYou are welcome to comment, open issues on my github projects and send suggestions to my email on any subject.\nThanks for reading this post, more will be coming soon!","tags":[],"title":"Starting the journey","type":"post"},{"authors":[],"categories":[],"content":"Star\n","date":1574777938,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574777938,"objectID":"9dadba59c631bcf54d8dab87bb398d6f","permalink":"https://blog.coregen.io/project/coregen/","publishdate":"2019-11-26T16:18:58+02:00","relpermalink":"/project/coregen/","section":"project","summary":"Star","tags":[],"title":"Coregen","type":"project"},{"authors":null,"categories":["Test"],"content":"Before starting work on other projects, I thought about automating everything related to developing, testing and deploying my blog (pls stahp yes I know im lazy). It occured to me that it might be a good idea to consider others who ran into this issue before me.. and thats how I found this project which is related to Pelicans\u0026rsquo; Elegant theme.\nI found their method of dealing with static content deployment very elegant and decided that I will attempt the same with Hugo Academic.\nFirst, we will consider the commands used to create the static content and commit it to a different branch\n# Create the content hugo #  ","date":1572220800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572220800,"objectID":"c7bdbb021bae35b4b628cc598100de97","permalink":"https://blog.coregen.io/post/hugodeploy/","publishdate":"2019-10-28T00:00:00Z","relpermalink":"/post/hugodeploy/","section":"post","summary":"Before starting work on other projects, I thought about automating everything related to developing, testing and deploying my blog (pls stahp yes I know im lazy). It occured to me that it might be a good idea to consider others who ran into this issue before me.. and thats how I found this project which is related to Pelicans\u0026rsquo; Elegant theme.\nI found their method of dealing with static content deployment very elegant and decided that I will attempt the same with Hugo Academic.","tags":["hugo","github","travisci","aws"],"title":"Hugo deployment using Github and TravisCI - Part 1","type":"post"},{"authors":null,"categories":["Test"],"content":" During my first year in high-tech my go-to place for asking Programming and Linux related questions was the IRC. For ease of use and portability I started using GlowingBear on Nginx to expose a web frontend to Weechat.\nUsing weechat this way led me to deploying this IRC \u0026ldquo;stack\u0026rdquo; on AWS which gives free t2.micro time quota for Free Tier users (first 12 months after signing up to AWS). After deploying weechat and nginx manually (Including LetsEncrypt SSL certificates) I decided to find some way to automate this process.\nThe purpose of this article is to give an overview of creating, testing and deploying Ansible configurations, using weechat as an example.\nGoals Our goals are as following:\n An ansible role that will deploy Weechat, Nginx and GlowingBear to a specific linux user We should be able to use this role without disturbing other software running on the server This role should be automatically tested using a CI system against 3 different distributions We will write Terraform plans to use this role in conjunction with other roles on a t2.micro instance on AWS  This article will be split into 3-4 parts. This first part will be dealing with creating the ansible role.\nRequirements The first part will require the following to be available\n You should be running Linux or MacOS Ansible, ansible-galaxy Github account - You should have and account Molecule - Will be used for testing the ansible role  Creating the role First, we will create an ansible role using molecule\nmolecule init role -r myircstack  This will create the role in the directory you are currently at.\n○ → tree . ├── README.md ├── defaults │ └── main.yml ├── handlers │ └── main.yml ├── meta │ └── main.yml ├── molecule │ └── default │ ├── Dockerfile.j2 │ ├── INSTALL.rst │ ├── molecule.yml │ ├── playbook.yml │ └── tests │ └── test_default.py ├── tasks │ └── main.yml └── vars └── main.yml 8 directories, 11 files  The initial file structure will include a molecule directory which molecule will use to create docker containers to test the role we write. we will be editing the files there soon.\nFor ansible to install weechat-headless, which will allow us to run weechat as a daemon, we need to make sure we are installing the latest weechat version that supports it (minimum 2.1). we will use debian for our host.\nPackage Iinstallation Following the weechat installationg instructions for debian, we can start writing our playbook.\nInside tasks/ we will create the file: tasks/setup-debian9.yml\n--- - name: Update and install debian packages apt: update_cache: true # will update the local debian apt repositories pkg: - nginx # we will use nginx to servce glowingbear (more about this soon) - openssl - git # weechat dependencies / will be used to add deb repos - dirmgr - gpg-agent - apt-transport-https - name: Add weechat keys apt_key: keyserver: hkps://keys.openpgp.org id: 11E9DE8848F2B65222AA75B8D1820DB22A11534E - name: Add weechat repository apt_repository: repo: deb https://weechat.org/debian stretch main state: present - name: Add weechat src repository apt_repository: repo: deb-src https://weechat.org/debian stretch main state: present - name: Update and install weechat apt: update_cache: true pkg: - weechat - weechat-plugins - weechat-python - weechat-perl - weechat-headless  This task is specific to debian 9 (stretch) and will be tested as such, it\u0026rsquo;s also worth noting that we are adding an external repository (https://weechat.org/debian).\nThis means that in addition to depending on debian repositories we are depending on a private weechat repository which is not ideal. We will addres this in the next chapters.\nSystem Configuration For weechat-headless to run successfuly (and hopefully in a way that doesnt create vulnerabilities) we are going to configure the linux environment. There are many ways to do this, some more secure than others.\nWe will begin with generic configurations. First, lets create some variables: vars/main.yaml\n--- weechat_username: \u0026quot;weechat\u0026quot; weechat_home: \u0026quot;/home/{{ weechat_username }}\u0026quot; weechat_config_dir: \u0026quot;{{ weechat_home }}/.weechat\u0026quot; weechat_creds_dir: \u0026quot;{{ weechat_config_dir }}/ssl\u0026quot; weechat_relay_cert: \u0026quot;{{ weechat_creds_dir }}/weechat.pem\u0026quot; weechat_relay_public_cert: \u0026quot;{{ weechat_creds_dir }}/relay.pem\u0026quot; weechat_relay_key: \u0026quot;{{ weechat_creds_dir }}/relay.key\u0026quot; weechat_relay_password: \u0026quot;defaultpassword\u0026quot; nginx_server_url: \u0026quot;localhost\u0026quot; nginx_server_ssl_cert_dir: \u0026quot;/var/creds\u0026quot; glowingbear_path: /var/www/glowingbear  These variables will allow us some flexability when writing our playbook, including having custom relay certification and linux username\ntasks/environment.yaml\n--- - name: Create weechat user user: name: \u0026quot;{{ weechat_username }}\u0026quot; shell: /bin/bash create_home: true home: \u0026quot;{{ weechat_home }}\u0026quot; - name: Make sure ssl creds dir exists file: path: \u0026quot;{{ nginx_server_ssl_cert_dir }}\u0026quot; state: directory mode: '0700' - name: Make sure systemd units directory exists file: owner: root path: /usr/lib/systemd/system state: directory mode: '0755' - name: Make sure weechat config directory exists file: path: \u0026quot;{{ weechat_config_dir_path }}\u0026quot; state: directory mode: '0755' owner: \u0026quot;{{ weechat_username }}\u0026quot; - name: Make sure weechat creds directory exists file: path: \u0026quot;{{ relay_creds_dir }}\u0026quot; state: directory mode: '0700' owner: \u0026quot;{{ weechat_username }}\u0026quot;  Templates At this step will create 3 templates, for nginx, weechat relay, and the weechat service.\nLets start with the service:\nAs you can see, I have decided to use the weechat user to run this service, this decision was made primarily due to the fact that weechat by default allows command executions, and running this process as root is just asking for it\u0026hellip;\ntemplates/weechat.service.j2\n[Unit] Description=A headless WeeChat client and relay service After=network.target [Service] Type=forking ExecStart=/usr/bin/weechat-headless --daemon User={{ weechat_username }} [Install] WantedBy=default.target  I have opted to inserting the password directly into the template, there are several other options including using environment variables\nIt\u0026rsquo;s possible to add the environmental variables inside a file and adding EnvironmentFile=/path/to/file under Service in the systemd unit file\ntemplates/relay.conf.j2\n# # weechat -- relay.conf # # WARNING: It is NOT recommended to edit this file by hand, # especially if WeeChat is running. # # Use /set or similar command to change settings in WeeChat. # # For more info, see: https://weechat.org/doc/quickstart # [look] auto_open_buffer = on raw_messages = 256 [color] client = cyan status_active = lightblue status_auth_failed = lightred status_connecting = yellow status_disconnected = lightred status_waiting_auth = brown text = default text_bg = default text_selected = white [network] allow_empty_password = off allowed_ips = \u0026quot;\u0026quot; bind_address = \u0026quot;\u0026quot; clients_purge_delay = 0 compression_level = 6 ipv6 = on max_clients = 5 password = \u0026quot;{{ weechat_relay_password }}\u0026quot; ssl_cert_key = \u0026quot;{{ weechat_relay_cert }}\u0026quot; ssl_priorities = \u0026quot;NORMAL:-VERS-SSL3.0\u0026quot; totp_secret = \u0026quot;\u0026quot; totp_window = 0 websocket_allowed_origins = \u0026quot;\u0026quot; [irc] backlog_max_minutes = 1440 backlog_max_number = 256 backlog_since_last_disconnect = on backlog_since_last_message = off backlog_tags = \u0026quot;irc_privmsg\u0026quot; backlog_time_format = \u0026quot;[%H:%M] \u0026quot; [weechat] commands = \u0026quot;\u0026quot; [port] ipv4.ipv6.weechat = 9001 [path]  There are two things to note about the the Nginx config\n We are not using SSL to secure the server (The plan is to use AWS Cloudfront) We bound GlowingBear to the nginx server root. (It\u0026rsquo;s a weechat frontend)  More about this in later chapters\ntemplates/glowingbear.j2\nmap $http_upgrade $connection_upgrade { default upgrade; '' close; } # Make sure this upstream matches your configuration in weechat! upstream weechat { server [::1]:9001; } server { listen 80; server_name {{ nginx_server_url }}; location /weechat { proxy_pass https://weechat; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026quot;upgrade\u0026quot;; proxy_ssl_trusted_certificate {{ weechat_relay_cert }}; proxy_ssl_verify off; proxy_read_timeout 4h; } location / { root {{ glowingbear_path }}; } }  Weechat Configuration At this point we have everything we need as far as directory creation.\nNow we will create the SSL certificate that will be used by the Weechat Relay. Weechat requires we concatenate both certificates and mention the concatenated files\u0026rsquo; contents (cert before key) in relay.conf.\ntasks/weechat.yaml\n--- - name: Create weechat key shell: \u0026gt; openssl req -x509 -nodes -newkey rsa:4096 -sha256 -keyout {{ weechat_relay_key }} -out {{ weechat_relay_public_cert }} -days 365 -subj '/CN=weechat relay/' - name: Concatenate public cert and key into weechat relay cert shell: \u0026gt; cat {{ weechat_relay_public_cert }} {{ weechat_relay_key }} \u0026gt; {{ weechat_relay_cert }} # Create the weechat service unit file - name: Template weechat.service template: src: weechat.service.j2 dest: /usr/lib/systemd/system/weechat.service owner: root mode: '0755' - name: Template weechat relay config template: src: relay.conf.j2 dest: \u0026quot;{{ weechat_config_dir }}/relay.conf\u0026quot; owner: weechat mode: '0755' - name: Activate weechat service systemd: name: weechat enabled: true state: started  Frontend Before enabling and starting Nginx, we will clone GlowingBear and make sure the Nginx ste configuration is templated and linked.\n--- - name: Download glowing bear git: repo: 'https://github.com/glowing-bear/glowing-bear.git' version: master dest: /var/www/glowingbear - name: Template nginx site template: src: glowingbear.j2 dest: /etc/nginx/sites-available/glowingbear owner: root mode: '0755' - name: Link glowingbear frontend to sites-enabled file: src: /etc/nginx/sites-available/glowingbear dest: /etc/nginx/sites-enabled/default state: link  Nginx Configuration Here we simply enable and start the Nginx service\ntasks/nginx.yml\n--- - name: Activate nginx service systemd: name: nginx enabled: true state: started  Finalizing Tasks To bring all the configuration together, we will use the main.yml file that will be read and processed by ansible during playbook execution. Notice that we are passing a conditional that will execute package installation only if we are using Debian 9. More distribution can be supported by adding tasks corresponding to their name/version.\ntasks/main.yml\n- include_tasks: environment.yml when: weechat_config_repo - include_tasks: setup-debian9.yml when: ansible_os_family == 'Debian' and ansible_distribution_version == '9' - include_tasks: weechat.yml when: weechat_config_repo - include_tasks: glowingbear.yml when: weechat_frontend - include_tasks: nginx.yml when: nginx_with_reverse_proxy  Role Metadata Metadata should be added to provide more information about the role, it\u0026rsquo;s author, role name, license and supported platforms\nmeta/main.yaml\ngalaxy_info: author: Barak Avrahami description: This role is used to install Weechat, and use it with nginx to serve GlowingBear company: Coregen role_name: ircstack license: MIT min_ansible_version: 2.4 platforms: - name: debian versions: - '9' galaxy_tags: [irc, weechat, nginx, glowingbear] # List tags for your role here, one per line. A tag is a keyword that describes # and categorizes the role. Users find roles by searching for tags. Be sure to # remove the '[]' above, if you add tags to this list. # # NOTE: A tag is limited to a single word comprised of alphanumeric characters. # Maximum 20 tags per role. dependencies: [] # List your role dependencies here, one per line. Be sure to remove the '[]' above, # if you add dependencies to this list.  Conclusion Now we have a role that will install and configure Weechat, Nginx and GlowingBear but you might be asking \u0026ldquo;oh, well thats excellent, but how do I know it works?\u0026rdquo; Well.. you can add it to a playbook and execute this role, it will probably hopefully work. but testing this role will make changing anything considerably easier.\nI tested this code and it does work on Debian Stretch\nStay tuned for the the next part, in which we will configure Molecule and Docker to test this role on different systems\nI hope you enjoyed this article, leave a comment if you feel like I missed something or just to say Hi!\n","date":1572220800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572220800,"objectID":"8c3d3614643c14a763eadd927e9d97b6","permalink":"https://blog.coregen.io/post/weechat-ansible-aws-1/","publishdate":"2019-10-28T00:00:00Z","relpermalink":"/post/weechat-ansible-aws-1/","section":"post","summary":"During my first year in high-tech my go-to place for asking Programming and Linux related questions was the IRC. For ease of use and portability I started using GlowingBear on Nginx to expose a web frontend to Weechat.\nUsing weechat this way led me to deploying this IRC \u0026ldquo;stack\u0026rdquo; on AWS which gives free t2.micro time quota for Free Tier users (first 12 months after signing up to AWS). After deploying weechat and nginx manually (Including LetsEncrypt SSL certificates) I decided to find some way to automate this process.","tags":["Devops","Ansible","Github","Git","Weechat"],"title":"Weechat server using Ansible, Terraform and AWS - Part 1","type":"post"},{"authors":null,"categories":["Test"],"content":" Requirements  You should be running Linux or MacOS Ansible, ansible-galaxy Github account - You should have and account hub (It\u0026rsquo;s not required, but there will be some manual actions required if not installed) Travis-CI command line tools - Automating the tests Molecule - Will be used for testing the ansible role Docker - Will be used by molecule to create containers  Creating the role ","date":1572220800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572220800,"objectID":"c0e1c7aa0273c7899a15287f6b06716c","permalink":"https://blog.coregen.io/post/weechat-server-2/","publishdate":"2019-10-28T00:00:00Z","relpermalink":"/post/weechat-server-2/","section":"post","summary":" Requirements  You should be running Linux or MacOS Ansible, ansible-galaxy Github account - You should have and account hub (It\u0026rsquo;s not required, but there will be some manual actions required if not installed) Travis-CI command line tools - Automating the tests Molecule - Will be used for testing the ansible role Docker - Will be used by molecule to create containers  Creating the role ","tags":["Devops","Ansible","Github","Git","Weechat","Molecule","Docker","TravisCI"],"title":"Weechat server using Ansible, Terraform and AWS - Part 2","type":"post"}]