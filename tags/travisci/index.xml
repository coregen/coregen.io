<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>travisci | Coregen</title>
    <link>https://blog.coregen.io/tags/travisci/</link>
      <atom:link href="https://blog.coregen.io/tags/travisci/index.xml" rel="self" type="application/rss+xml" />
    <description>travisci</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 28 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://blog.coregen.io/img/icon-32.png</url>
      <title>travisci</title>
      <link>https://blog.coregen.io/tags/travisci/</link>
    </image>
    
    <item>
      <title>Hugo deployment using Github, TravisCI, AWS and Terraform</title>
      <link>https://blog.coregen.io/post/hugodeploy/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://blog.coregen.io/post/hugodeploy/</guid>
      <description>&lt;p&gt;Before starting work on other projects, I thought about automating everything related to developing, testing and deploying my blog (pls stahp yes I know im lazy).
It occured to me that it might be a good idea to consider others who ran into this issue before me.. and thats how I found &lt;a href=&#34;https://github.com/Pelican-Elegant/blog-o-matic&#34; target=&#34;_blank&#34;&gt;this project&lt;/a&gt; which is related to Pelicans&amp;rsquo; Elegant theme.&lt;/p&gt;

&lt;p&gt;I found their method of dealing with static content deployment very elegant and decided that I will attempt the same with Hugo Academic.&lt;/p&gt;

&lt;p&gt;First, we will consider the commands used to create the static content&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hist(rnorm(100))
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
